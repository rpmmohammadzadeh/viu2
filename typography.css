.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 12px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 12px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 16px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 16px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 16px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 16px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 16px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 500;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 17px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 17px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 17px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 17px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 18px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 16px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 20px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 24px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 26px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 28px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 30px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 32px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 32px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 36px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 36px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 24px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 26px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 28px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 30px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 32px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 36px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 36px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 46px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 48px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 60px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 80px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 14px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 18px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 18px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 40px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 600;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 12px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 12px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 400;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 700;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 10px;
  text-indent: 0px;
  
}    

.
 
 
 const tokenGroups = new Set()
 for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
   tokenGroups.add(tokenGroup)
 }
 const tokenGroup = tokenGroups.values().next().value
 
 let prefix = ""
 
 switch (context.tokenType) {
   case "Color":
     prefix = behavior.colorTokenPrefix
     break
   case "Typography":
     prefix = behavior.typographyTokenPrefix
     break
   case "Shadow":
     prefix = behavior.shadowTokenPrefix
     break
   case "Border":
     prefix = behavior.borderTokenPrefix
     break
   case "Measure":
     prefix = behavior.measureTokenPrefix
     break
   case "Gradient":
     prefix = behavior.gradientTokenPrefix
     break
   default:
     prefix = ""
 }
 
 let tokenName = readableVariableName(context, tokenGroup, prefix)
 
 undefined
  
 {
  
  font-family: "Poppins";
  font-style: normal;
  font-weight: 800;
  font-size: var(--
                   
                   
                   const tokenGroups = new Set()
                   for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                     tokenGroups.add(tokenGroup)
                   }
                   const tokenGroup = tokenGroups.values().next().value
                   
                   let prefix = ""
                   
                   switch (context.tokenType) {
                     case "Color":
                       prefix = behavior.colorTokenPrefix
                       break
                     case "Typography":
                       prefix = behavior.typographyTokenPrefix
                       break
                     case "Shadow":
                       prefix = behavior.shadowTokenPrefix
                       break
                     case "Border":
                       prefix = behavior.borderTokenPrefix
                       break
                     case "Measure":
                       prefix = behavior.measureTokenPrefix
                       break
                     case "Gradient":
                       prefix = behavior.gradientTokenPrefix
                       break
                     default:
                       prefix = ""
                   }
                   
                   let tokenName = readableVariableName(context, tokenGroup, prefix)
                   
                   undefined
                   );
  line-height: 10px;
  letter-spacing: 12px;
  text-indent: 0px;
  
}    

