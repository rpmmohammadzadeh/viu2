
:root {
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 0px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 0px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 10px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 12px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 14px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 16px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 17px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 18px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 20px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 24px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 26px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 28px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 30px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 32px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 36px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 40px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 46px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 48px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 60px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 80px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 112px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 20px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 22px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 28px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 16px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 14px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 30px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 120px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 90px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 80px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 52px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 46px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 40px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 32px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 24px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 70px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 50px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 44px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 36px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 0px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 0%;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 80px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 30px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 28px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 4px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 8px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 16px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 20px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 24px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 32px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 40px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 48px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 56px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 64px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 72px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 80px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 88px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 96px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 104px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 112px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 24px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 24px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 16px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : 16px;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
}