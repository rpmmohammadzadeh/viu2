
:root {
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ffffff;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #f8fafc;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #e5eaef;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #8295ad;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #647891;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #4a6382;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #2e4664;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #141e2b;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #1f88de;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #59a5e2;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ebf5fc;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #6bbb85;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #91cea5;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #deede3;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #e36357;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #f98d82;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ebdedd;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ecb241;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #fdcb6b;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ece6db;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #3a98e533;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #3a98e5;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #1f7ac4;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #1d67a3;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #16558a;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #f06e61;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ce4a3e;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #ad3b31;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #962d24;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #7cc694;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #2b8748;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #125c2a;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #f6bd4e;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #914c07;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #803d0d;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : #1f7ac4;    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
    --
      
      
      const tokenGroups = new Set()
      for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
        tokenGroups.add(tokenGroup)
      }
      const tokenGroup = tokenGroups.values().next().value
      
      let prefix = ""
      
      switch (context.tokenType) {
        case "Color":
          prefix = behavior.colorTokenPrefix
          break
        case "Typography":
          prefix = behavior.typographyTokenPrefix
          break
        case "Shadow":
          prefix = behavior.shadowTokenPrefix
          break
        case "Border":
          prefix = behavior.borderTokenPrefix
          break
        case "Measure":
          prefix = behavior.measureTokenPrefix
          break
        case "Gradient":
          prefix = behavior.gradientTokenPrefix
          break
        default:
          prefix = ""
      }
      
      let tokenName = readableVariableName(context, tokenGroup, prefix)
      
      undefined
      : var(--
              
              
              const tokenGroups = new Set()
              for (const tokenGroup of ds.tokenGroupsContainingTokenId(context.id)) {
                tokenGroups.add(tokenGroup)
              }
              const tokenGroup = tokenGroups.values().next().value
              
              let prefix = ""
              
              switch (context.tokenType) {
                case "Color":
                  prefix = behavior.colorTokenPrefix
                  break
                case "Typography":
                  prefix = behavior.typographyTokenPrefix
                  break
                case "Shadow":
                  prefix = behavior.shadowTokenPrefix
                  break
                case "Border":
                  prefix = behavior.borderTokenPrefix
                  break
                case "Measure":
                  prefix = behavior.measureTokenPrefix
                  break
                case "Gradient":
                  prefix = behavior.gradientTokenPrefix
                  break
                default:
                  prefix = ""
              }
              
              let tokenName = readableVariableName(context, tokenGroup, prefix)
              
              undefined
              );    
}